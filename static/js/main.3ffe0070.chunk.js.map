{"version":3,"sources":["serviceWorker.js","Cell.js","lineCollapse.js","lineReverse.js","shuffleArray.js","Board.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cell","props","state","value","this","className","React","Component","lineCollapse","line","first","length","second","lineReverse","returnLine","i","push","shuffleArray","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","globalRender","Board","size","cellRows","row","cellCols","col","cells","handleKeyPress","bind","rowNum","colNum","returnCol","newRow","setState","currState","tempBoard","newCol","newCell","event","keyCode","collapseLeft","collapseUp","collapseRight","collapseDown","setRandomElement","tempRow","getRow","slice","setRow","tempCol","getCol","setCol","generateRandomElement","setCell","val","shuffledIndicesArr","getArrayOfAllIndices","getFirstZeroValueCell","alert","indicesArr","j","r","c","ind","document","addEventListener","removeEventListener","prevProps","prevState","map","indRow","key","cell","indCol","App","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DCMSC,E,YApBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAOF,EAAME,OAHE,E,sEAYjB,OAAmB,IAAfC,KAAKD,MACA,yBAAKE,UAAU,SAEf,yBAAKA,UAAU,QAAQD,KAAKD,S,4BAPrC,OAAOC,KAAKF,MAAMC,U,GATHG,IAAMC,WCmBVC,MApBf,SAAsBC,GAEpB,IADA,IAAIC,EAAQ,EACLA,EAAQD,EAAKE,QAAQ,CAE1B,IADA,IAAIC,EAASF,EAAQ,EACG,IAAjBD,EAAKG,IAAiBA,EAASH,EAAKE,QACzCC,IAEF,GAAIA,IAAWH,EAAKE,OAAQ,OAAOF,EACf,IAAhBA,EAAKC,IACPD,EAAKC,GAASD,EAAKG,GACnBH,EAAKG,GAAU,GACNH,EAAKC,KAAWD,EAAKG,IAC9BH,EAAKC,IAAUD,EAAKG,GACpBH,EAAKG,GAAU,EACfF,KACKA,IAET,OAAOD,GCTMI,MARf,SAAqBJ,GAEnB,IADA,IAAIK,EAAa,GACRC,EAAIN,EAAKE,OAAS,EAAGI,GAAK,EAAGA,IACpCD,EAAWE,KAAKP,EAAKM,IAEvB,OAAOD,GCeMG,MApBf,SAAsBC,GAMpB,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMP,OAKlB,IAAMU,GAEXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCZLO,EAAe,EAsMJC,E,YAlMb,WAAYzB,GAAQ,IAAD,sBACjB,4CAAMA,IAIN,IAHA,IAAM0B,EAAO1B,EAAM0B,KACbC,EAAW,GAERC,EAAM,EAAGA,EAAMF,EAAME,IAAO,CAEnC,IADA,IAAIC,EAAW,GACNC,EAAM,EAAGA,EAAMJ,EAAMI,IAC5BD,EAASd,KAAK,GAEhBY,EAASZ,KAAKc,GAVC,OAajB,EAAK5B,MAAQ,CACXyB,KAAMA,EACNK,MAAOJ,GAGT,EAAKK,eAAiB,EAAKA,eAAeC,KAApB,gBAlBL,E,oEA6BZC,GACL,OAAO/B,KAAK4B,MAAMG,K,6BAGbC,GAEL,IADA,IAAIC,EAAY,GACPtB,EAAI,EAAGA,EAAIX,KAAK4B,MAAMrB,OAAQI,IACrCsB,EAAUrB,KAAKZ,KAAK4B,MAAMjB,GAAGqB,IAE/B,OAAOC,I,6BAGFF,EAAQG,GACblC,KAAKmC,UAAS,SAAAC,GACZ,IAAIC,EAAYD,EAAUR,MAE1B,OADAS,EAAUN,GAAUG,EACb,CACLN,MAAOS,Q,6BAKNL,EAAQM,GACbtC,KAAKmC,UAAS,SAAAC,GAEZ,IADA,IAAIC,EAAYD,EAAUR,MACjBjB,EAAI,EAAGA,EAAI0B,EAAU9B,OAAQI,IACpC0B,EAAU1B,GAAGqB,GAAUM,EAAO3B,GAEhC,MAAO,CACLiB,MAAOS,Q,8BAKLN,EAAQC,EAAQO,GACtBvC,KAAKmC,UAAS,SAAAC,GACZ,IAAIC,EAAYD,EAAUR,MAE1B,OADAS,EAAUN,GAAQC,GAAUO,EACrB,CACLX,MAAOS,Q,qCAKEG,GACS,KAAlBA,EAAMC,QACRzC,KAAK0C,eACsB,KAAlBF,EAAMC,QACfzC,KAAK2C,aACsB,KAAlBH,EAAMC,QACfzC,KAAK4C,gBACsB,KAAlBJ,EAAMC,SACfzC,KAAK6C,eAGP7C,KAAK8C,qB,qCAIL,IAAK,IAAInC,EAAI,EAAGA,EAAIX,KAAKuB,KAAMZ,IAAK,CAClC,IAAIoC,EAAU/C,KAAKgD,OAAOrC,GACtBuB,EAAS9B,EAAa2C,EAAQE,SAElCjD,KAAKkD,OAAOvC,EAAGuB,M,sCAIjB,IAAK,IAAIvB,EAAI,EAAGA,EAAIX,KAAKuB,KAAMZ,IAAK,CAClC,IAAIoC,EAAUtC,EAAYT,KAAKgD,OAAOrC,IAClCuB,EAAS9B,EAAa2C,EAAQE,SAClCjD,KAAKkD,OAAOvC,EAAGF,EAAYyB,O,mCAI7B,IAAK,IAAIvB,EAAI,EAAGA,EAAIX,KAAKuB,KAAMZ,IAAK,CAClC,IAAIwC,EAAUnD,KAAKoD,OAAOzC,GACtB2B,EAASlC,EAAa+C,EAAQF,SAClCjD,KAAKqD,OAAO1C,EAAG2B,M,qCAKjB,IAAK,IAAI3B,EAAI,EAAGA,EAAIX,KAAKuB,KAAMZ,IAAK,CAClC,IAAIwC,EAAU1C,EAAYT,KAAKoD,OAAOzC,IAClC2B,EAASlC,EAAa+C,EAAQF,SAClCjD,KAAKqD,OAAO1C,EAAGF,EAAY6B,O,yCAK7B,IAAIC,EAAUvC,KAAKsD,wBACnBtD,KAAKuD,QAAQhB,EAAQd,IAAKc,EAAQZ,IAAKY,EAAQiB,O,8CAI/C,IAAIC,EAAqB5C,EAAab,KAAK0D,wBADrB,EAEL1D,KAAK2D,sBAAsBF,GAFtB,mBAEjBhC,EAFiB,KAEZE,EAFY,KAGtB,IAAa,IAATF,EAIJ,MAAO,CACLA,IAAKA,EACLE,IAAKA,EACL6B,IAxIY,GAkIZI,MAAM,e,6CAYR,IADA,IAAIC,EAAa,GACRlD,EAAI,EAAGA,EAAIX,KAAKuB,KAAMZ,IAC7B,IAAK,IAAImD,EAAI,EAAGA,EAAI9D,KAAKuB,KAAMuC,IAC7BD,EAAWjD,KAAK,CACdmD,EAAGpD,EACHqD,EAAGF,IAIT,OAAOD,I,4CAGaA,GAIpB,IAHA,IAAII,EAAM,EACNxC,EAAMoC,EAAWI,GAAKF,EACtBpC,EAAMkC,EAAWI,GAAKD,EACM,IAAzBhE,KAAK4B,MAAMH,GAAKE,IAAY,CAEjC,KADAsC,IACYJ,EAAWtD,OACrB,OAAY,EAEdkB,EAAMoC,EAAWI,GAAKF,EACtBpC,EAAMkC,EAAWI,GAAKD,EAExB,MAAO,CAACvC,EAAKE,K,0CAIbuC,SAASC,iBAAiB,UAAWnE,KAAK6B,gBAAgB,GAC1D7B,KAAK8C,qB,6CAILoB,SAASE,oBAAoB,UAAWpE,KAAK6B,gBAAgB,K,yCAG5CwC,EAAWC,M,+BAI5B,OADAjD,GAAgB,EAEd,yBAAKpB,UAAU,SACZD,KAAK4B,MAAM2C,KAAI,SAAC9C,EAAK+C,GAAN,OACd,yBAAKvE,UAAU,MAAMwE,IAAK,QAAepD,EAAe,IAAMmD,GAC3D/C,EAAI8C,KAAI,SAACG,EAAMC,GAAP,OACP,yBAAKF,IAAK,QAAepD,EAAe,IAAMsD,GAC5C,kBAAC,EAAD,CAAMF,IAAK,OAASE,EAAS,QAAUH,EAAQzE,MAAO2E,e,4BAlKlE,OAAO1E,KAAKF,MAAM8B,Q,2BAIlB,OAAO5B,KAAKF,MAAMyB,S,GA3BFrB,IAAMC,WCiBXyE,E,YApBb,WAAY/E,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXyB,KANK,GAGU,E,sEAYjB,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAOsB,KAAMvB,KAAKuB,U,2BANtB,OAAOvB,KAAKF,MAAMyB,S,GATJrB,IAAMC,WCCxB0E,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SP4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ffe0070.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass Cell extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.value\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.state.value;\r\n  }\r\n\r\n  render() {\r\n    if (this.value === 0) {\r\n      return <div className=\"cell\"></div>;\r\n    } else {\r\n      return <div className=\"cell\">{this.value}</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import \"./App.css\";\r\n\r\nfunction lineCollapse(line) {\r\n  let first = 0;\r\n  while (first < line.length) {\r\n    let second = first + 1;\r\n    while (line[second] === 0 && second < line.length) {\r\n      second++;\r\n    }\r\n    if (second === line.length) return line;\r\n    if (line[first] === 0) {\r\n      line[first] = line[second];\r\n      line[second] = 0;\r\n    } else if (line[first] === line[second]) {\r\n      line[first] += line[second];\r\n      line[second] = 0;\r\n      first++;\r\n    } else first++;\r\n  }\r\n  return line;\r\n}\r\n\r\nexport default lineCollapse;\r\n","import \"./App.css\";\r\n\r\nfunction lineReverse(line) {\r\n  let returnLine = [];\r\n  for (let i = line.length - 1; i >= 0; i--) {\r\n    returnLine.push(line[i]);\r\n  }\r\n  return returnLine;\r\n}\r\n\r\nexport default lineReverse;\r\n","import \"./App.css\";\r\n\r\nfunction shuffleArray(array) {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport default shuffleArray;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Cell from \"./Cell.js\";\r\nimport lineCollapse from \"./lineCollapse.js\";\r\nimport lineReverse from \"./lineReverse.js\";\r\nimport shuffleArray from \"./shuffleArray.js\";\r\n\r\nlet globalRender = 0;\r\nlet START_VALUE = 2;\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const size = props.size;\r\n    const cellRows = [];\r\n\r\n    for (let row = 0; row < size; row++) {\r\n      let cellCols = [];\r\n      for (let col = 0; col < size; col++) {\r\n        cellCols.push(0);\r\n      }\r\n      cellRows.push(cellCols);\r\n    }\r\n\r\n    this.state = {\r\n      size: size,\r\n      cells: cellRows\r\n    };\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  get cells() {\r\n    return this.state.cells;\r\n  }\r\n\r\n  get size() {\r\n    return this.state.size;\r\n  }\r\n\r\n  getRow(rowNum) {\r\n    return this.cells[rowNum];\r\n  }\r\n\r\n  getCol(colNum) {\r\n    let returnCol = [];\r\n    for (let i = 0; i < this.cells.length; i++) {\r\n      returnCol.push(this.cells[i][colNum]);\r\n    }\r\n    return returnCol;\r\n  }\r\n\r\n  setRow(rowNum, newRow) {\r\n    this.setState(currState => {\r\n      let tempBoard = currState.cells;\r\n      tempBoard[rowNum] = newRow;\r\n      return {\r\n        cells: tempBoard\r\n      };\r\n    });\r\n  }\r\n\r\n  setCol(colNum, newCol) {\r\n    this.setState(currState => {\r\n      let tempBoard = currState.cells;\r\n      for (let i = 0; i < tempBoard.length; i++) {\r\n        tempBoard[i][colNum] = newCol[i];\r\n      }\r\n      return {\r\n        cells: tempBoard\r\n      };\r\n    });\r\n  }\r\n\r\n  setCell(rowNum, colNum, newCell) {\r\n    this.setState(currState => {\r\n      let tempBoard = currState.cells;\r\n      tempBoard[rowNum][colNum] = newCell;\r\n      return {\r\n        cells: tempBoard\r\n      };\r\n    });\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if (event.keyCode === 37) {\r\n      this.collapseLeft();\r\n    } else if (event.keyCode === 38) {\r\n      this.collapseUp();\r\n    } else if (event.keyCode === 39) {\r\n      this.collapseRight();\r\n    } else if (event.keyCode === 40) {\r\n      this.collapseDown();\r\n    }\r\n\r\n    this.setRandomElement();\r\n  }\r\n\r\n  collapseLeft() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      let tempRow = this.getRow(i);\r\n      let newRow = lineCollapse(tempRow.slice());\r\n\r\n      this.setRow(i, newRow);\r\n    }\r\n  }\r\n  collapseRight() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      let tempRow = lineReverse(this.getRow(i));\r\n      let newRow = lineCollapse(tempRow.slice());\r\n      this.setRow(i, lineReverse(newRow));\r\n    }\r\n  }\r\n  collapseUp() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      let tempCol = this.getCol(i);\r\n      let newCol = lineCollapse(tempCol.slice());\r\n      this.setCol(i, newCol);\r\n    }\r\n  }\r\n\r\n  collapseDown() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      let tempCol = lineReverse(this.getCol(i));\r\n      let newCol = lineCollapse(tempCol.slice());\r\n      this.setCol(i, lineReverse(newCol));\r\n    }\r\n  }\r\n\r\n  setRandomElement() {\r\n    let newCell = this.generateRandomElement();\r\n    this.setCell(newCell.row, newCell.col, newCell.val);\r\n  }\r\n\r\n  generateRandomElement() {\r\n    let shuffledIndicesArr = shuffleArray(this.getArrayOfAllIndices());\r\n    let [row, col] = this.getFirstZeroValueCell(shuffledIndicesArr);\r\n    if (row === -1) {\r\n      alert(\"GAME OVER\");\r\n      return;\r\n    }\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      val: START_VALUE\r\n    };\r\n  }\r\n\r\n  getArrayOfAllIndices() {\r\n    let indicesArr = [];\r\n    for (let i = 0; i < this.size; i++) {\r\n      for (let j = 0; j < this.size; j++) {\r\n        indicesArr.push({\r\n          r: i,\r\n          c: j\r\n        });\r\n      }\r\n    }\r\n    return indicesArr;\r\n  }\r\n\r\n  getFirstZeroValueCell(indicesArr) {\r\n    let ind = 0;\r\n    let row = indicesArr[ind].r;\r\n    let col = indicesArr[ind].c;\r\n    while (this.cells[row][col] !== 0) {\r\n      ind++;\r\n      if (ind === indicesArr.length) {\r\n        return -1, -1;\r\n      }\r\n      row = indicesArr[ind].r;\r\n      col = indicesArr[ind].c;\r\n    }\r\n    return [row, col];\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress, false);\r\n    this.setRandomElement();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress, false);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {}\r\n\r\n  render() {\r\n    globalRender += 1;\r\n    return (\r\n      <div className=\"board\">\r\n        {this.cells.map((row, indRow) => (\r\n          <div className=\"row\" key={\"row_\" + \"_\" + globalRender + \"_\" + indRow}>\r\n            {row.map((cell, indCol) => (\r\n              <div key={\"col_\" + \"_\" + globalRender + \"_\" + indCol}>\r\n                <Cell key={\"col_\" + indCol + \"_row_\" + indRow} value={cell} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board.js\";\n\nvar SIZE = 4;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: SIZE\n    };\n  }\n\n  get size() {\n    return this.state.size;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board size={this.size} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}